const crypto = require("crypto");

// generated by crypto.randomBytes(16).toString('hex')
const ENC_KEY = process.env.SECRET_ENC_KEY; // encryption key

// generated by crypto.randomBytes(8).toString('hex')
const IV = process.env.SECRET_ENC_IV; // IV (Initialization Vector)

exports.encrypt = val => {
  const cipher = crypto.createCipheriv("aes-256-cbc", ENC_KEY, IV);
  let encrypted = cipher.update(JSON.stringify(val), "utf8", "base64");
  encrypted += cipher.final("base64");
  return encrypted;
};

exports.decrypt = encrypted => {
  const decipher = crypto.createDecipheriv("aes-256-cbc", ENC_KEY, IV);
  const decrypted = decipher.update(encrypted, "base64", "utf8");
  return JSON.parse(decrypted + decipher.final("utf8"));
};

exports.getHmacSignature = (string, secret) => {
  const hmac = crypto.createHmac("sha256", secret);
  hmac.update(string);
  return hmac.digest("base64");
};

// generate random unique hash for usage in url
// don't really need right now
exports.getConfirmationCode = () => crypto.randomBytes(10).toString("hex");
